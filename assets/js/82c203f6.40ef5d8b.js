"use strict";(self.webpackChunktypefs_docs=self.webpackChunktypefs_docs||[]).push([[7867],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(r),f=a,g=u["".concat(l,".").concat(f)]||u[f]||d[f]||i;return r?n.createElement(g,o(o({ref:t},c),{},{components:r})):n.createElement(g,o({ref:t},c))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},5146:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const i={title:"Storage Manager",sidebar_label:"Storage Manager"},o=void 0,s={unversionedId:"api/storage",id:"api/storage",title:"Storage Manager",description:"The storage manager holds the configuration of your disks and which disk is the default one.",source:"@site/docs/api/storage.md",sourceDirName:"api",slug:"/api/storage",permalink:"/docs/api/storage",draft:!1,editUrl:"https://github.com/daniel-samson/typefs/edit/documentation/docs/api/storage.md",tags:[],version:"current",frontMatter:{title:"Storage Manager",sidebar_label:"Storage Manager"},sidebar:"docs",previous:{title:"Version 2",permalink:"/docs/migration/v2"},next:{title:"Disk Driver",permalink:"/docs/api/disk-driver"}},l={},p=[{value:"Example",id:"example",level:3},{value:"Select Disk",id:"select-disk",level:3},{value:"Use Default Disk",id:"use-default-disk",level:3},{value:"Disk Configuration",id:"disk-configuration",level:3}],c={toc:p};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The storage manager holds the configuration of your disks and which disk is the default one."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "default": "assets",\n    "disks": {\n        "assets": {\n            "driver": "file",\n            "root": "/app/public/assets",\n            "jail": true\n        }\n    }\n}\n')),(0,a.kt)("h3",{id:"select-disk"},"Select Disk"),(0,a.kt)("p",null,"Storage manager lets you select the disk you are interested in."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Storage } from 'typefs';\n\nconst driver = Storage.disk('assets');\n")),(0,a.kt)("h3",{id:"use-default-disk"},"Use Default Disk"),(0,a.kt)("p",null,"To use the default disk, you simply ommit the disk to select"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Storage } from 'typefs';\n\nconst driver = Storage.disk();\n")),(0,a.kt)("h3",{id:"disk-configuration"},"Disk Configuration"),(0,a.kt)("p",null,'The "driver" specifies which driver will be used to access the file system. This is followed by ',(0,a.kt)("a",{parentName:"p",href:"https://daniel-samson.github.io/typefs/docs/api/config"},"configuration")," for said driver."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"\nimport { Storage, config } from 'typefs';\n\nStorage.config = config();\n")),(0,a.kt)("h1",{id:"registering-disk-driver"},"Registering Disk Driver"),(0,a.kt)("p",null,"To register a custom disk driver,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// index.ts\nimport { Storage } from 'typefs';\n//...\n\nStorage.registerDriver('mydiskdriver', (configuration: DiskConfiguration): DiskDriver => new MyDiskDriver(configuration as MyDiskConfig));\n")),(0,a.kt)("p",null,"update your configuration to use the new driver:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "default": "assets",\n    "disks": {\n        "assets": {\n            "driver": "mydiskdriver",\n            "root": "/app/public/assets",\n            "jail": true,\n        }\n    }\n}\n')))}u.isMDXComponent=!0}}]);